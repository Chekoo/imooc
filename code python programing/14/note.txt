14章：执行环境

可调用对象：函数、方法、类、类的实例

内建函数(BIF, Built-in Function)   C/C++写的，编译过后放入Python解释器，然后把他们作为第一（内建）名称空间的一部分加载进系统
这些函数在__bulitin__模块里，并作为__builtins__

用户定义的函数(UDF, User-Defined Function)

lambda表达式（函数）：虽然也也是返回一个函数对象

callable()是一个布尔函数，确定一个对象是否可以通过函数操作符(())来调用，可调用返回True，否则返回False

compile()允许程序员在运行时刻迅速生成代码对象，然后用execc语句或eval()内建函数来执行这些对象
或对它们进行求值。
exec和eval()都可以执行字符串格式的Python代码
'eval'   可求值的表达式[和eval()一起使用]
'single' 单一可执行语句[和exec一起使用]
'exec'   可执行语句组[和exec一起使用]

eval()对表达式求值，后者可以为字符串或内建函数compile()创建的预编译代码对象，
exec语句执行代码对象或字符串形式的python代码，只接受一个参数  exec obj，可以字符串、也可以预编译成一个代码对象


EOF end-of-file   文件末尾

input()内建函数是eval()和raw_input()的组合，等价于eval(raw_input))

第一次导入模块会执行模块最高级的代码。  只有属于模块最高级(即没有缩进)的代码才是全局变量、全局类和全局函数声明

execfile(filename)

python -m CGIHTTPServer    python Web服务器

执行其他(非python)程序
要求：  一个有效的执行环境    比如：文件访问和执行，脚本文件必须能访问它们的解释器，二进制必须是可访问的（和本地机器的构架兼容
）

os.system()    接受字符串形式的系统命令并执行它，执行时，Python的运行是挂起的，执行后，会已system()的返回值形式给出退出状态，Python的执行也会继续

os.popen()   是文件对象和system()函数的结合   ，返回一个类文件对象，readline()往往保留输入文本行尾的newline字符

os.fork()    采用称为进程的单一的执行流程控制。
调用fork()的原始进程为父进程，而作为该调用结果新创建的进程则称为子进程，子进程返回时候，返回值永远是0，
父进程返回时，其返回值永远是子进程的进程标识符(又称进程ID，PID),PID是唯一可以区分他们的方式

os.exec*()   可以调用它来运行完全不同的程序，或者同一个程序中的其他函数（只要子进程和父进程用不同的路径执行）
装载文件或者命令，并用参数列表(分别给出或作为参数列表的一部分)来执行它
os.wait*()     调用wait()会挂起执行，知道子进程或其他子进程正常执行完毕或通过信号终止。wait()将会收获子进程，释放所有资源。
收获孩子(reaping a child)
父进程可以等待子进程文成并在那进行扫尾

os.spawn*()    和fork, exec*()相似，因为它们在新进程中执行命令. 取代了os.system()，取代os.popen()