正则表达式(RE)：  高级文本模式匹配，以及搜索-替代等功能提供了基础。
它们是一些由字符和特殊符号组成的字符串描述了这些字符和字符的某种重复方式，因此能按照某中模式匹配
一个有相似特征的字符串的集合，能匹配一系列有相似特征的字符串。

搜索和匹配的比较：

匹配(matching)：指的是模式匹配(pattern-matching)，判断一个字符串能否从起始处全部或部分的匹配某个模式
调用match()函数
试图从整个字符串的开头进行匹配


搜索(searching): 在字符串任意部分中搜索匹配的模式,
调用search()函数
从一个字符串的任意位置开始匹配

\w        匹配任何数字字母字符，和[A-Za-z0-9_]相同   (\W是\w的反义)       [A-Za-z0-9]\w+
\s        匹配任何空白符，和[\n\t\r\v\f]相同 (\S是\s的反义)              of\sthe
\b        匹配单词边界                      (\B是\b的反义)              \bThe\b
\nn       匹配已保存的子组
\c        逐一匹配特殊字符c(即，取消它的特殊含义，按字面匹配)
\a(\Z)    匹配字符串的起始(结束)
\d        匹配十进制数字


|: 匹配多个正则表达式模式，它可以匹配不止一个字符串，“或”有时候也被叫做联合(union)或逻辑或(OR)
表示一个或操作，意思是选择被管道符号分割的多个不同的正则表达式中的一个


.: 匹配任意一个单个的字符
匹配除换行符(NEWLINE)外的任意一个单个字符(Python的正则表达式有一个编译标识[S or DOTALL],该标识
能去掉这一限制，是(.)在匹配时包括换行符(NEWLINE)

ps: 如何匹配".":   必须在前面使用"\"，对它进行转义

从字符串开头或结尾或单词边界开始匹配(^/$^b^B)
如果想从字符串开头开始匹配一个模式，必须用'^'或特殊字符'\A'。
'&'  '\z'用来匹配字符串的结尾

\b \B  匹配单词边界
\b: 匹配在单词的开头，不论这个单词的前面是有字符还是没有字符
\B: 匹配出现在一个单词中间的模式

[]:匹配方括号里的任何一个字符
b[aeiu]t   bat, aet, ait, aut

-：指定范围
^： 否定     如果在左方括号后第一个字符上箭头符号(^)，就是不匹配指定字符集里的任意字符
[^aeiou]  一个非元音字符
[^\t\n]    除TAB制表符和换行符意外的任意一个字符

使用必包操作符(*,+,?,{})实现多次出现/重复匹配
*:  左边那个正则表达式出现零次或零次以上的情况
+:  左边那个正则表达式至少出现一次的情况
?:  左边那个正则表达式出现零次或一次的情况
{}:  若为{N}，出现N次，若为{M,N}匹配M次到N次

?有两种含义：
1.单独使用时表示匹配出现零次或一次的情况
2.紧跟在表示重复的元字符后面是，表示要求搜索引擎匹配的字符串越短越好


(): 对正则表达式进行分组； 匹配子组
好处: 匹配的子串会被保存到一个子组，以便今后使用
(\w+)-(\d+)  可以对这两个匹配的子组分别进行访问。

python代码最终会被编译成字节码，然后才被解释器执行。
调用eval()或exec()调用一个代码对象！！而不是一个字符串
使用预编译代码对象要比字符串快，因为解释器在执行字符串形式的代码前必须先把他编译成代码对象


在模式匹配之前，正则表达式模式必须先编译成regex对象，由于正则表达式在执行过程中被多次用于比较，
我们强烈建议对它先做预编译，而且，既然正则表达式的编译是必须的，那就使用预先编译来提升性能，
re.compile()就提供这个功能


匹配对象，这些对象是在match()或search()被成功调用之后返回的结果。主要有两个方法：group()、groups()
group()返回所有匹配对象或是根据要求返回某个特定子组。
groups()返回一个包含唯一或所有子组的元祖，
如果没有子组，groups()返回一个空元祖，而group()仍会返回全部匹配对象。


match()函数尝试从字符串的开头开始对模式进行匹配。如果匹配成功，就返回一个匹配对象。否则，返回None.

'.'不能匹配换行符或非字符(即空字符串)

findall()找到每个出现的匹配部分
finaall()和search()相似之处在于二者都执行字符串搜索，但findall()和match()与search()
不同之处是：findall()总返回一个列表。若没有找到匹配的部分，返回空列表。找到匹配部分，则返回
所有匹配部分的列表。(按从左到右出现的顺序排列)

sub()和subn()进行搜索和替换
都是将某字符串中所有匹配正则表达式模式的部分进行替换，用来替换的部分通常是一个字符串，也可能是
一个函数，该函数返回一个用来替换的字符串
subn()还会返回一个表示替换次数的数字，元祖形式返回

split()分割


Python原始字符串
str.replace(old, new, max)
str = 'this is string example'
print str.replace('is', 'was')
print str.replace('is', 'was', 3)

re.sub(pattern, repl, string):对于输入的一个字符串，利用正则表达式(的强大的字符串处理功能)，去实现(相对复杂的)
字符串替换处理，然后返回被替换后的字符串。
