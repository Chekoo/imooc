16.网络编程

客户端/服务器架构： 一个用户或客户端电脑通过因特网从服务器上获取数据。
客户端:用户
服务器:一个软件或者硬件，用于向一个或多个客户端(客户)提供所需要的'服务'



套接字：  一种具有‘通信端点‘概念的而计算机网络数据结构，
网络化的应用程序在开始任何通讯之前都必须创建套接字。类似电话插口
起源于20世纪70年代加州大学伯克利分校的Unix
分为2种：1.基于文件型  2.基于网络型

Unix套接字 基于文件型 Python使用AF_UNIX
AF_INET或叫Internet  基于网络型
Python只支持AF_UNIX, AF_NETLINK, AF_INET


套接字地址： 主机与端口
套接字比作电话的插口---通信的最底层结构
主机与端口就像区号和电话号码的一对组合。
合法端口号范围为0~65535,小于1024的端口号为系统保留端口。
一个因特网地址由网络通信所必需的主机与端口号组成。


面向连接与无连接套接字：
套接字的类型只有两种：
1.面向连接的套接字:即通信之前一定要建立一条连接，就像和朋友打电话那样。也称为'虚电路'、'流套接字'
  面向连接通信方式提供了顺序的、可靠的、不会重复的数据传输，也不会被加上数据边界。
  每一个要发送的信息，可能被拆分成多份，每一份都会不多不少的正确到达目的地，然后被重新按顺序拼接起来，传给正在等待的应用程序
  实现这种连接的主要协议就是传输控制协议(TCP)
  创建TCP套接字就得在 创建的时候指定套接字类型为SOCK_STREAM.
  由于这些套接字使用网际协议(IP)来查找网络中的主机，所以这样形成的整个系统，一般会由这两个协议(TCP/IP),即TCP/IP

2.无连接的套接字:数据报型的无连接套接字，意味着无需连接就可以进行通讯
  但是数据到达的顺序、可靠性及不重复性就无法保证。数据报保留数据边界，表示数据是整个发送的，不会先被拆分成小块。
  实现这种连接的主要协议就是用户数据报协议(UDP)
  要创建UDP套接字就得在创建时候指定套接字类型为SOCK_DGRAM,它也通过网际协议(IP)来查找网络的主机
  UDP/IP

socket.socket()来创建套接字
socket(socket_family, socket_type, protocol=0)
family不是AF_UNIX就是AF_INET  socket_type可以是SOCK_STREAM或SOCK_DGRAM, protocol一般不填，默认值为0

当我们创建了套接字对象后，所有的交互都将通过该套接字对象的方法调用来进行

套接字对象方法：
服务器：
s.bind()   绑定地址(主机名、端口号对)到套接字
s.listen() 开始TCP监听
s.accept()  被动接受TCP客户端连接
客户端：
s.connect()     主动初始化TCP服务器连接
s.connect_ex()  connect函数扩展，出错时返回出错码，而不是抛出异常
公共用途:
s.recv()       接收TCP数据
s.send()      发送TCP数据
s.sendall()    完整发送TCP
s.recvfrom()   接收UDP数据
s.sendto()     发送UDP数据

1.创建服务器套接字
2.把地址绑定到套接字上
3.监听连接
4.服务器无限循环
    5.接受客户端连接
6.通信循环
    7.对话(接收与发送)
8.关闭客户端套接字
9.关闭服务器套接字(可选)

accept()是阻塞式的，即程序在连接到来之前会处于挂起状态。
一旦收到一个连接，accpet()函数就会返回一个单独的客户端套接字用于后续的通信。使用新的客户端套接字就像总机把客户的电话转给一个客服服务人员。
这样就能空出总机，也就是最初的那个服务器套接字。
当一个请求到来时，要创建一个新的端口，然后直接在那个端口上与客户对话，这样就可以空出主端口来接收其他客户的连接。

创建线程来处理客户端请求
SocketServer模块是一个基于socket模块的高级别的套接字通讯模块，支持在新的线程或进程中处理客户端请求。

