多线程编程

多线程(multithreaded,MT)

并行运行相互独立的子任务,这样并行处理可以大幅度的提升整个任务的效率

一个顺序执行的程序要从每个I/O(输入/输出)终端信道检查用户输入时,程序无论如何也不能在读书I/O终端信道时候阻塞.
因为用户输入的到达是不确定的,阻塞会导致其他I/O信息的数据不能被处理.顺序执行的程序必须使用
非阻塞I/O,或是带有计时器的阻塞I/O.

UserRequestThread:负责读取客户的输入,可能是一个I/O信道,程序可能创建多个线程,每个客户一个,请求会被放入队列中.
RequestProcessor:一个负责从队列中获取并处理请求的线程,它为下面那种线程提供输出
ReplyThread:负责把给用户的输出取出来,如果是网络应用程序就把结果发送出去,否则就保存到本地文件系统或数据库中.


进程（有时候被称为重量级进程）是程序的一次执行。
每个进程都有自己的地址空间、内存、数据栈及其他记录其运行轨迹的辅助数据。
各个进程有自己的内存空间、数据栈等，所以只能使用进程间通讯，不能直接共享信息。



线程（有时被称为轻量级进程）与进程有些相似，所有的线程运行在同一个进程中，共享相同的运行环境。
可以被想象成是在主进程或‘主线程’中并行运行的‘迷你进程’
线程运行可能被中断，或被挂起，或让步。一个进程中各个线程之间共享同一片数据空间，所以线程之间
可以比进程之间更方便地共享数据以及相互通信。
线程一般为并发执行。

竞态条件：如果多个线程共同访问同一片数据，由于数据访问的顺序不一样有可能导致数据结果的不一致问题。

另一个注意的地方：有的函数会在完成之前阻塞住。


Python代码的执行由Python虚拟机(也叫解释器主循环)来控制。
虽然Python解释器可以运行多个线程，但在任意时刻，只有一个线程在解释器中运行。
全局解释器锁 GIL
多线程环境中，Python按以下方式执行：
1.设置GIL
2.切换到一个线程去运行
3.运行：
a.指定数量的字节码的指令或者
b.线程主动让出控制(可以调用time.sleep(0))
4.把线程设置为睡眠状态
5.解锁GIL
6.再次重复以上所有步骤


不可以直接kill一个进程


没有线程支持的情况:
time.sleep()需要一个浮点型参数

python提供了几个用于多线程编程的模块，包括thread、threading、Queue

thread提供了基本的线程和锁的支持
threading提供了更高级别、功能更强的线程管理
Queue允许用户创建一个可以用于多个线程之间共享数据队列数据结构


生产者和消费者问题


















