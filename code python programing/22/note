扩展：
所有能被整合或导入到其他Python脚本的代码，都可以被称为扩展。

Python特点： 扩展和解释器之间的交互方式与普通的Python模块完全一样。

扩展理由：
添加/额外的(非Python)功能
性能瓶颈的效率提升
Python是解释型语言，它在运行时动态地翻译代码，导致其运行速度比编译型语言慢。
保持专有源代码私密



创建步骤：
1.创建应用程序代码
2.利用样板来包装代码
3.编译与测试


样板分为4步：
1.包含python的头文件
2.为每个模块的每一个函数增加一个形如PyObject*Module_func()的包装函数
3.为每一个模块增加一个形如PyMethodDefModuleMethods[]的数组
4.增加模块初始化函数void initModule()

1.#include "Python.h"
2.需要为所有想被Python环境访问的函数都增加一个静态的函数，函数的返回值类型为PyObject*，
函数名前面要加上模块名和一个下划线(_),PS:创建一个Extest_fac()，然后使用时候import Extest  /  from Extest import fac

包装函数的用处就是先把Python的值传递给C,然后调用我们想要调用的相关函数。当这个函数完成要返回
python的时候，把函数的计算结果转换成python的对象，然后返回给python。

从python到C   用PyArg_Parse*()
从C到python   用Py_BuildValue()
先生成要返回的对象，然后释放在包装函数中申请的内存。


编译阶段：
让新python扩展被创建，需要把它们与python库放在一起编译
distutils包被用来编译、安装、分发这些模块、扩展和包
1.创建setup.py
2.通过运行setup.py来编译和连接你的代码
3.从python中导入你的模块
4.测试功能

setup()，在这个函数调用之前的所有代码，都是一些预备动作。为了能编译扩展，要为每一个扩展创建一个Extension实例
Extension('Extest', sources=['Extest2.c'])


1.SWIG
Simplified Wrapper and Interface Generator
这个工具可以根据特别注释过的C/C++头文件生成给python、Tel和Perl使用的包装代码

2.Pyrex
只要shiiyongpyrex的语法写代码，然后运行pyrex编译器去编译源代码，pyrex就会生成相应的C代码，这些代码可以被编译成普通的扩展。

3.Psyco
一个just-in-time编译器，它能在运行时自动把字节码转为本地代码运行。让已有的python代码运行更快


4.嵌入
嵌入是把python解释器包装到C的程序中。