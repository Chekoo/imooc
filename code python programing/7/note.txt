一个字典对象是可变的，它是一个容器类型，能存储任意个数的Python对象，其中也包括其他容器类型。

哈希表的算法是获取键，对键执行一个叫做哈希函数的操作，并根据计算的结果，选择在数据结构的某个地址
中来存储你的值。任何一个值存储的地址皆取决于它的键。正因为这种随意性，哈希表中的值是没有顺序的。
你拥有的是一个无序的数据集。

方法Keys()或values()返回一个列表，该列表是可排序的。你还可以用items()方法
得到包含键、值对的元组的列表来排序。

字典的比较： 先比较字典长度，再比较键，再比较值

浅拷贝  VS   深拷贝：
浅拷贝是指拷贝的只是原对象元素的引用，换句话说，浅拷贝产生的对象本身是新的，
但是它的内容不是新的，只是对原对象的一个引用。这里有个例子

至于如何看深/浅拷贝的区别，可以通过下面的操作来展现：

>>> a.append(5)    #操作1
>>> a[4].append('hello')   #操作2

这时再查看结果：

>>> a
[1, 2, 0, 4, ['a', 'b', 'c', 'hello'], 5]
>>> b
[1, 2, 0, 4, ['a', 'b', 'c', 'hello'], 5]
>>> c
[1, 2, 3, 4, ['a', 'b', 'c', 'hello']]
>>> d
[1, 2, 3, 4, ['a', 'b', 'c']]

可以发现a、b受了操作1、2的影响，c只受操作2影响，d不受影响。a、b结果相同很好理解。
由于c是a的浅拷贝，只拷贝了父对象，因此a的子对象（ ['a', 'b', 'c', 'hello']）改变时会影响到c，
d是深拷贝，完全不受a的影响

Python 字典(Dictionary) fromkeys() 函数用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。
语法
fromkeys()方法语法：
dict.fromkeys(seq[, value]))


集合等价/不等价与集合的类型或集合成员的顺序无关，只与集合的元素有关。+



